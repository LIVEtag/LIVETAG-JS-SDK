const { writeFileSync } = require('fs');
const path = require('path');
const util = require('util');
const exec = util.promisify(require('child_process').exec);

const filename = path.resolve(process.argv[2]);

if (!filename) {
  console.error('Please provide filename.');

  process.exit();
}

async function getVersions() {
  const params = {
    revision: null,
    branch: null,
  };

  try {
    params.revision = (await exec('git rev-parse --short HEAD')).stdout.toString().trim();
    params.branch = (await exec('git rev-parse --abbrev-ref HEAD')).stdout.toString().trim();
  } catch (e) {
    //
  }

  return {
    version: process.env.npm_package_version,
    ...params,
  };
}

function createVersionFile({ version, revision, branch }, filename) {
  const ext = path.extname(filename).substr(1) || 'ts';
  const formatEncoders = {
    json: (data) => JSON.stringify(data, null, 2),
    ts: (data) => `// THIS FILE IS AUTOMATICALLY GENERATED. TO UPDATE THIS FILE YOU NEED
// TO RUN "npm run write-version"
export const version = {
  version: '${data.version}',
  revision: '${data.revision}',
  branch: '${data.branch}'
};
`,
  };

  const encode = formatEncoders[ext] || formatEncoders.ts;

  writeFileSync(filename, encode({ version, revision, branch }), { encoding: 'utf8' });
}

getVersions()
  .then((version) => {
    createVersionFile(version, filename);

    return version;
  })
  .then((version) => {
    console.log(`version: '${version.version}'`, `revision: '${version.revision}'`, `branch: '${version.branch}'`);
  });
